[X, y] = read_csv('Iris')
[xtrn, ytrn, xtst, ytst] = split(X, y)

model1 = Sequential[ Dense(8, 'relu'), Dense(3, 'softmax')]
compile(model1, 'sgd', 'categorical_crossentropy', ['accuracy'])

model2 = Sequential[ Dense(8, 'relu'), Dense(16, 'relu'), Dense(3, 'softmax')]
compile(model2, 'sgd', 'categorical_crossentropy', ['accuracy'])

#model3 = Sequential[ Dense(8, 'relu'), Dense(16, 'relu'), Dense(24, 'relu'), Dense(3, 'softmax')]
#compile(model3, 'sgd', 'categorical_crossentropy', ['accuracy'])

# Unifica los modelos
#bagging = Bagging([model1, model2, model3], 'mode')
bagging = Bagging([model1, model2], 'mean')

# Los entrena
fit(bagging, xtrn, ytrn, 16)

# Hace la prediccion
x_pred = predict(bagging, xtst)

@

[X, y] = read_csv('Iris')
X = normalize(X)
[xtrn, ytrn, xtst, ytst] = split(X, y)
model = Sequential[ Dense(8, 'relu'), Dense(16, 'relu'),  Dense(3, 'softmax') ]
compile(model, 'sgd', 'categorical_crossentropy', ['accuracy'])
fit(model, xtrn, ytrn, 128)
x_pred = predict(model, xtst)
visualize(model)

@

[X,y] = read_csv('Wine')
X_norm = normalize(X)
y_norm = normalize(y)
[x_trn, y_trn, x_tst, x_trn] = split(X_norm, y_norm)

@

ann = Sequential[
    Dense(8, 'relu'),
    Dense(16, 'relu'),
    Dense(8, 'softmax')
]

@

compile(ann)
fit(ann, x_trn, y_trn, 100)
predict(ann, x_tst)
visualize(ann)